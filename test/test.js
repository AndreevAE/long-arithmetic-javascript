var assert = require("assert");
var operation = require("../long-arithmetic");

describe("addition", function() {

    // TODO tests for big numbers
    it("1 + 1 = 2", function() {
        assert.equal(operation.addition("1", "1"), "2");
    });

    it("1 + (-1) = 0", function() {
        assert.equal(operation.addition("1", "-1"), "0");
    });

    it("(-1) + 1 = 0", function() {
        assert.equal(operation.addition("-1", "1"), "0");
    });

    it("(-1) + (-1) = 0", function() {
        assert.equal(operation.addition("-1", "-1"), "-2");
    });

    it("0 + (-1) = (-1)", function() {
        assert.equal(operation.addition("0", "-1"), "-1");
    });

    it("(-1) + 0 = (-1)", function() {
        assert.equal(operation.addition("-1", "0"), "-1");
    });

    it("0 + 0 = 0", function() {
        assert.equal(operation.addition("0", "0"), "0");
    });

    it("9999999999999999999999999999999999999999999999999999999999999999999999999 + 1 = 10000000000000000000000000000000000000000000000000000000000000000000000000", function() {
        assert.equal(operation.addition("9999999999999999999999999999999999999999999999999999999999999999999999999",
                                        "1"),
                                        "10000000000000000000000000000000000000000000000000000000000000000000000000");
    });

    it("9999999999999999999999999999999999999999999999999999999999999999999999999 + 1234567891234567891234567892134567891234567891234567891234567891234657891 = 11234567891234567891234567892134567891234567891234567891234567891234657890", function() {
        assert.equal(operation.addition("9999999999999999999999999999999999999999999999999999999999999999999999999",
                                        "1234567891234567891234567892134567891234567891234567891234567891234657891"),
                                        "11234567891234567891234567892134567891234567891234567891234567891234657890");
    });
});

describe("subtraction", function() {

    // TODO tests for big numbers
    it("1 - 1 = 0", function() {
        assert.equal(operation.subtraction("1", "1"), "0");
    });

    it("1 - (-1) = 0", function() {
        assert.equal(operation.subtraction("1", "-1"), "2");
    });

    it("(-1) - 1 = 0", function() {
        assert.equal(operation.subtraction("-1", "1"), "-2");
    });

    it("(-1) - (-1) = 0", function() {
        assert.equal(operation.subtraction("-1", "-1"), "0");
    });

    it("0 - (-1) = 1", function() {
        assert.equal(operation.subtraction("0", "-1"), "1");
    });

    it("(-1) - 0 = (-1)", function() {
        assert.equal(operation.subtraction("-1", "0"), "-1");
    });

    it("0 - 0 = 0", function() {
        assert.equal(operation.subtraction("0", "0"), "0");
    });

    it("9999999999999999999999999999999999999999999999999999999999999999999999999 - 1 = 9999999999999999999999999999999999999999999999999999999999999999999999998", function() {
        assert.equal(operation.subtraction("9999999999999999999999999999999999999999999999999999999999999999999999999",
                                        "1"),
                                        "");
    });

    it("9999999999999999999999999999999999999999999999999999999999999999999999999 - 1234567891234567891234567892134567891234567891234567891234567891234657891 = ", function() {
        assert.equal(operation.subtraction("9999999999999999999999999999999999999999999999999999999999999999999999999",
                                        "1234567891234567891234567892134567891234567891234567891234567891234657891"),
                                        "8765432108765432108765432107865432108765432108765432108765432108765342108");
    });
});

describe("multiplication", function() {

    // TODO tests for big numbers
    it("1 * 1 = 1", function() {
        assert.equal(operation.multiplication("1", "1"), "1");
    });

    it("1 * (-1) = -1", function() {
        assert.equal(operation.multiplication("1", "-1"), "-1");
    });

    it("(-1) * 1 = 1", function() {
        assert.equal(operation.multiplication("-1", "1"), "-1");
    });

    it("(-1) * (-1) = 1", function() {
        assert.equal(operation.multiplication("-1", "-1"), "1");
    });

    it("0 * (-1) = (-1)", function() {
        assert.equal(operation.multiplication("0", "-1"), "-1");
    });

    it("(-1) * 0 = (-1)", function() {
        assert.equal(operation.multiplication("-1", "0"), "-1");
    });

    it("0 * 0 = 0", function() {
        assert.equal(operation.multiplication("0", "0"), "0");
    });

    it("9999999999999999999999999999999999999999999999999999999999999999999999999 * 1 = 9999999999999999999999999999999999999999999999999999999999999999999999999", function() {
        assert.equal(operation.multiplication("9999999999999999999999999999999999999999999999999999999999999999999999999",
                                              "1"),
                                              "9999999999999999999999999999999999999999999999999999999999999999999999999");
    });

    it("9999999999999999999999999999999999999999999999999999999999999999999999999 * 1234567891234567891234567892134567891234567891234567891234567891234657891 = 12345678912345678912345678921345678912345678912345678912345678912346578908765432108765432108765432107865432108765432108765432108765432108765342109", function() {
        assert.equal(operation.multiplication("9999999999999999999999999999999999999999999999999999999999999999999999999",
                                              "1234567891234567891234567892134567891234567891234567891234567891234657891"),
                                              "12345678912345678912345678921345678912345678912345678912345678912346578908765432108765432108765432107865432108765432108765432108765432108765342109");
    });
});
